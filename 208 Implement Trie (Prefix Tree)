class TrieNode{
    public: 
        bool isWord;
        TrieNode* child[26];
        TrieNode():isWord(false){
            for(int i = 0;i<26;i++){
                child[i] = NULL;
            }
        }
};

class Trie {
 public:
    TrieNode* root;

    /** Initialize your data structure here. */        
    Trie(){
        root = new TrieNode();
    }
    ~Trie(){
        delete root;
    }
    /** Inserts a word into the trie. */
    void insert(string word) {
        TrieNode* p=root;
        for(size_t i = 0;i<word.size();i++){
            int index = word[i]-'a';
            if(!p->child[index]){ //注意是[index]
                p->child[index] = new TrieNode();
            }
            p = p->child[index];
        }
        p->isWord = true;
        
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        TrieNode* p = root;
        for(size_t i = 0;i<word.size();i++){
            int index= word[i]-'a';
            if(p->child[index] == NULL){
                return false;
            }
            p = p->child[index];
        }
        return p->isWord;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        TrieNode* p = root;
        for(size_t i = 0;i<prefix.size();i++){
            int index = prefix[i]-'a';
            p = p->child[index];
            if(p == NULL){
                return false;
            }
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * bool param_2 = obj.search(word);
 * bool param_3 = obj.startsWith(prefix);
 */
